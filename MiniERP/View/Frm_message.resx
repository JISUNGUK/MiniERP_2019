<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RVEURVFp+h9uG7jhhwtiUAAAAABJRU5ErkJggg==
</value>
  </data>
</root>